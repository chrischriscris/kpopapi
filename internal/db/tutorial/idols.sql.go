// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: idols.sql

package tutorial

import (
	"context"
	"database/sql"
)

const createIdol = `-- name: CreateIdol :one
INSERT INTO idols (
    stage_name,
    name,
    gender,
    idol_info_id
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, stage_name, name, gender, idol_info_id, created_at, updated_at
`

type CreateIdolParams struct {
	StageName  string
	Name       string
	Gender     interface{}
	IdolInfoID sql.NullInt64
}

func (q *Queries) CreateIdol(ctx context.Context, arg CreateIdolParams) (Idol, error) {
	row := q.db.QueryRowContext(ctx, createIdol,
		arg.StageName,
		arg.Name,
		arg.Gender,
		arg.IdolInfoID,
	)
	var i Idol
	err := row.Scan(
		&i.ID,
		&i.StageName,
		&i.Name,
		&i.Gender,
		&i.IdolInfoID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM idols
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getIdol = `-- name: GetIdol :one
SELECT id, stage_name, name, gender, idol_info_id, created_at, updated_at FROM idols
WHERE id = ? LIMIT 1
`

func (q *Queries) GetIdol(ctx context.Context, id interface{}) (Idol, error) {
	row := q.db.QueryRowContext(ctx, getIdol, id)
	var i Idol
	err := row.Scan(
		&i.ID,
		&i.StageName,
		&i.Name,
		&i.Gender,
		&i.IdolInfoID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listIdols = `-- name: ListIdols :many
SELECT id, stage_name, name, gender, idol_info_id, created_at, updated_at FROM idols
ORDER BY name
`

func (q *Queries) ListIdols(ctx context.Context) ([]Idol, error) {
	rows, err := q.db.QueryContext(ctx, listIdols)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Idol
	for rows.Next() {
		var i Idol
		if err := rows.Scan(
			&i.ID,
			&i.StageName,
			&i.Name,
			&i.Gender,
			&i.IdolInfoID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIdol = `-- name: UpdateIdol :exec
UPDATE idols
set name = ?
WHERE id = ?
`

type UpdateIdolParams struct {
	Name string
	ID   interface{}
}

func (q *Queries) UpdateIdol(ctx context.Context, arg UpdateIdolParams) error {
	_, err := q.db.ExecContext(ctx, updateIdol, arg.Name, arg.ID)
	return err
}
