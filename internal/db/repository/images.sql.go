// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: images.sql

package repository

import (
	"context"
)

const addGroupImage = `-- name: AddGroupImage :one
INSERT INTO group_images (
    image_id,
    group_id
) VALUES (
    $1,
    $2
)
RETURNING id, group_id, image_id, created_at, updated_at
`

type AddGroupImageParams struct {
	ImageID int32
	GroupID int32
}

func (q *Queries) AddGroupImage(ctx context.Context, arg AddGroupImageParams) (GroupImage, error) {
	row := q.db.QueryRow(ctx, addGroupImage, arg.ImageID, arg.GroupID)
	var i GroupImage
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.ImageID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addIdolImage = `-- name: AddIdolImage :one
INSERT INTO idol_images (
    image_id,
    idol_id
) VALUES (
    $1,
    $2
)
RETURNING id, idol_id, image_id, created_at, updated_at
`

type AddIdolImageParams struct {
	ImageID int32
	IdolID  int32
}

func (q *Queries) AddIdolImage(ctx context.Context, arg AddIdolImageParams) (IdolImage, error) {
	row := q.db.QueryRow(ctx, addIdolImage, arg.ImageID, arg.IdolID)
	var i IdolImage
	err := row.Scan(
		&i.ID,
		&i.IdolID,
		&i.ImageID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addImage = `-- name: AddImage :one
INSERT INTO images (url) VALUES ($1)
RETURNING id, url, created_at, updated_at
`

func (q *Queries) AddImage(ctx context.Context, url string) (Image, error) {
	row := q.db.QueryRow(ctx, addImage, url)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addImageMetadata = `-- name: AddImageMetadata :one
INSERT INTO image_metadata (
    image_id,
    width,
    height
) VALUES (
    $1,
    $2,
    $3
)
RETURNING id, image_id, width, height, landscape, created_at, updated_at
`

type AddImageMetadataParams struct {
	ImageID int32
	Width   int32
	Height  int32
}

func (q *Queries) AddImageMetadata(ctx context.Context, arg AddImageMetadataParams) (ImageMetadatum, error) {
	row := q.db.QueryRow(ctx, addImageMetadata, arg.ImageID, arg.Width, arg.Height)
	var i ImageMetadatum
	err := row.Scan(
		&i.ID,
		&i.ImageID,
		&i.Width,
		&i.Height,
		&i.Landscape,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getImageByUrl = `-- name: GetImageByUrl :one
SELECT id, url, created_at, updated_at FROM images
WHERE url = $1
LIMIT 1
`

func (q *Queries) GetImageByUrl(ctx context.Context, url string) (Image, error) {
	row := q.db.QueryRow(ctx, getImageByUrl, url)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNumberOfImages = `-- name: GetNumberOfImages :one
SELECT COUNT(*) FROM images
`

func (q *Queries) GetNumberOfImages(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfImages)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getRandomImage = `-- name: GetRandomImage :one
SELECT id, url, created_at, updated_at FROM images
ORDER BY random()
LIMIT 1
`

func (q *Queries) GetRandomImage(ctx context.Context) (Image, error) {
	row := q.db.QueryRow(ctx, getRandomImage)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
