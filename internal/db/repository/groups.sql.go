// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: groups.sql

package repository

import (
	"context"
)

const getGroupByName = `-- name: GetGroupByName :one
SELECT id, name, type, debut_date, company_id, created_at, updated_at FROM groups
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetGroupByName(ctx context.Context, name string) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupByName, name)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DebutDate,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGroups = `-- name: ListGroups :many
SELECT id, name, type, debut_date, company_id, created_at, updated_at FROM groups
`

func (q *Queries) ListGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, listGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.DebutDate,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
