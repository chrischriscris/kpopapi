// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: groups.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGroupMinimal = `-- name: CreateGroupMinimal :one
INSERT INTO groups (name, type)
VALUES ($1, $2)
RETURNING id, name, type, debut_date, company_id, created_at, updated_at
`

type CreateGroupMinimalParams struct {
	Name string
	Type string
}

func (q *Queries) CreateGroupMinimal(ctx context.Context, arg CreateGroupMinimalParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroupMinimal, arg.Name, arg.Type)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DebutDate,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createGroupMinimalWithDebut = `-- name: CreateGroupMinimalWithDebut :one
INSERT INTO groups (name, type, debut_date)
VALUES ($1, $2, $3)
RETURNING id, name, type, debut_date, company_id, created_at, updated_at
`

type CreateGroupMinimalWithDebutParams struct {
	Name      string
	Type      string
	DebutDate pgtype.Date
}

func (q *Queries) CreateGroupMinimalWithDebut(ctx context.Context, arg CreateGroupMinimalWithDebutParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroupMinimalWithDebut, arg.Name, arg.Type, arg.DebutDate)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DebutDate,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGroupByName = `-- name: GetGroupByName :one
SELECT id, name, type, debut_date, company_id, created_at, updated_at FROM groups
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetGroupByName(ctx context.Context, name string) (Group, error) {
	row := q.db.QueryRow(ctx, getGroupByName, name)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DebutDate,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGroups = `-- name: ListGroups :many
SELECT id, name, type, debut_date, company_id, created_at, updated_at FROM groups
`

func (q *Queries) ListGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.Query(ctx, listGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.DebutDate,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
